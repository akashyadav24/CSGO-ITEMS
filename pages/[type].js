import axios from "axios";
import useSWRInfinite from "swr/infinite";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState, useRef } from "react";
import ItemCard from "../components/ItemCard";
import ItemsFilter from "../components/ItemsFilter";
import SpinnerLoader from "../components/SpinnerLoader";
import { getSkins } from "../services/csgo";
import Error from "next/error";
import Custom404 from "./404";

const URL = {
  skins: "/api/skins",
  crates: "/api/crates",
  stickers: "/api/stickers",
  collections: "/api/collections",
  collectibles: "/api/collectibles",
  agents: "/api/agents",
  graffiti: "/api/graffiti",
  keys: "/api/keys",
  patches: "/api/patches",
  "music-kits": "/api/music_kits",
};

export default function Skins() {
  const router = useRouter();
  const { type } = router.query;

  const [mounted, setMounted] = useState(false);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, [type]);

  const fetcher = (url) =>
    axios.get(url).then((res) => {
      return res.data;
    });

  const getKey = (pageIndex, previousPageData) => {
    if (previousPageData && !previousPageData.length) return null;

    // const url = {
    //   skins: "/api/skins",
    //   crates: "/api/crates",
    //   stickers: "/api/stickers",
    //   collections: "/api/collections",
    //   collectibles: "/api/collectibles",
    //   agents: "/api/agents",
    //   graffiti: "/api/graffiti",
    //   patches: "/api/patches",
    //   "music-kits": "/api/music_kits",
    // };

    return `${URL[type]}?page=${pageIndex + 1}`;
  };

  const isValidType = (type) => {
    // const url = {
    //   skins: "/api/skins",
    //   stickers: "/api/stickers",
    // };

    return URL[type] !== undefined;
  };

  const { data, size, setSize } = useSWRInfinite(
    mounted ? getKey : null,
    fetcher,
    { revalidateFirstPage: false }
  );

  // if (error) return <div>Failed to load</div>
  // if (!data) return <div>Loading...</div>

  useEffect(() => {
    setLoading(false);
  }, [data]);

  useEffect(() => {
    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  });

  // useEffect(() => {
  //   const filtered = skins.filter((item) => {
  //     if (search === "") return true;
  //     return item.name.toLowerCase().includes(search.toLowerCase());
  //   });

  //   setFilteredItems(filtered);
  //   setShowedItems(filtered.splice(0, 20));
  // }, [search]);

  const handleScroll = () => {
    const lastItemLoaded =
      document.querySelector(".items-grid > .group:last-child") ||
      document.querySelector(".items-grid-small > .group:last-child");
    if (lastItemLoaded) {
      const lastItemLoadedOffset =
        lastItemLoaded.offsetTop + lastItemLoaded.clientHeight;
      const pageOffset = window.pageYOffset + window.innerHeight;

      if (pageOffset > lastItemLoadedOffset && loading === false) {
        setLoading(true);
        setSize(size + 1);
      }
    }
  };

  if (mounted && !isValidType(type)) {
    return <Custom404 />;
  }

  return (
    <>
      <Head>
        <title>Skins - CSGO ITEMS</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <ItemsFilter filter={false} search={search} setSearch={setSearch} /> */}
      <SpinnerLoader loading={!data} />
      <div className="items-grid-small sm:items-grid">
        {data
          ? data?.map((items, index) => {
              return (
                Array.isArray(items) &&
                items.map((item) => (
                  <ItemCard
                    key={item.id}
                    route={{ type: type, id: item.id }}
                    name={item.name}
                    image={item.image}
                    rarity={item.rarity}
                  ></ItemCard>
                ))
              );
            })
          : null}
      </div>
    </>
  );
}
